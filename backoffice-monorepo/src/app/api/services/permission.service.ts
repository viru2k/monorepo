/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { permissionControllerCreate } from '../fn/permission/permission-controller-create';
import { PermissionControllerCreate$Params } from '../fn/permission/permission-controller-create';
import { permissionControllerFindAll } from '../fn/permission/permission-controller-find-all';
import { PermissionControllerFindAll$Params } from '../fn/permission/permission-controller-find-all';
import { permissionControllerFindOne } from '../fn/permission/permission-controller-find-one';
import { PermissionControllerFindOne$Params } from '../fn/permission/permission-controller-find-one';
import { permissionControllerRemove } from '../fn/permission/permission-controller-remove';
import { PermissionControllerRemove$Params } from '../fn/permission/permission-controller-remove';
import { permissionControllerUpdate } from '../fn/permission/permission-controller-update';
import { PermissionControllerUpdate$Params } from '../fn/permission/permission-controller-update';

@Injectable({ providedIn: 'root' })
export class PermissionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `permissionControllerFindAll()` */
  static readonly PermissionControllerFindAllPath = '/permissions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `permissionControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerFindAll$Response(params?: PermissionControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return permissionControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `permissionControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerFindAll(params?: PermissionControllerFindAll$Params, context?: HttpContext): Observable<void> {
    return this.permissionControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `permissionControllerCreate()` */
  static readonly PermissionControllerCreatePath = '/permissions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `permissionControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  permissionControllerCreate$Response(params: PermissionControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return permissionControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `permissionControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  permissionControllerCreate(params: PermissionControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.permissionControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `permissionControllerFindOne()` */
  static readonly PermissionControllerFindOnePath = '/permissions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `permissionControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerFindOne$Response(params: PermissionControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return permissionControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `permissionControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerFindOne(params: PermissionControllerFindOne$Params, context?: HttpContext): Observable<void> {
    return this.permissionControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `permissionControllerUpdate()` */
  static readonly PermissionControllerUpdatePath = '/permissions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `permissionControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  permissionControllerUpdate$Response(params: PermissionControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return permissionControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `permissionControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  permissionControllerUpdate(params: PermissionControllerUpdate$Params, context?: HttpContext): Observable<void> {
    return this.permissionControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `permissionControllerRemove()` */
  static readonly PermissionControllerRemovePath = '/permissions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `permissionControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerRemove$Response(params: PermissionControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return permissionControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `permissionControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  permissionControllerRemove(params: PermissionControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.permissionControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
