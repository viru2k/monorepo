/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { roleControllerCreate } from '../fn/role/role-controller-create';
import { RoleControllerCreate$Params } from '../fn/role/role-controller-create';
import { roleControllerFindAll } from '../fn/role/role-controller-find-all';
import { RoleControllerFindAll$Params } from '../fn/role/role-controller-find-all';
import { roleControllerFindOne } from '../fn/role/role-controller-find-one';
import { RoleControllerFindOne$Params } from '../fn/role/role-controller-find-one';
import { roleControllerRemove } from '../fn/role/role-controller-remove';
import { RoleControllerRemove$Params } from '../fn/role/role-controller-remove';
import { roleControllerUpdate } from '../fn/role/role-controller-update';
import { RoleControllerUpdate$Params } from '../fn/role/role-controller-update';

@Injectable({ providedIn: 'root' })
export class RoleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `roleControllerFindAll()` */
  static readonly RoleControllerFindAllPath = '/roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roleControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerFindAll$Response(params?: RoleControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roleControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roleControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerFindAll(params?: RoleControllerFindAll$Params, context?: HttpContext): Observable<void> {
    return this.roleControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roleControllerCreate()` */
  static readonly RoleControllerCreatePath = '/roles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roleControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roleControllerCreate$Response(params: RoleControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roleControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roleControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roleControllerCreate(params: RoleControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.roleControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roleControllerFindOne()` */
  static readonly RoleControllerFindOnePath = '/roles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roleControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerFindOne$Response(params: RoleControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roleControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roleControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerFindOne(params: RoleControllerFindOne$Params, context?: HttpContext): Observable<void> {
    return this.roleControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roleControllerUpdate()` */
  static readonly RoleControllerUpdatePath = '/roles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roleControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roleControllerUpdate$Response(params: RoleControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roleControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roleControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  roleControllerUpdate(params: RoleControllerUpdate$Params, context?: HttpContext): Observable<void> {
    return this.roleControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roleControllerRemove()` */
  static readonly RoleControllerRemovePath = '/roles/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roleControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerRemove$Response(params: RoleControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roleControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roleControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roleControllerRemove(params: RoleControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.roleControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
