/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { settingControllerCreate } from '../fn/setting/setting-controller-create';
import { SettingControllerCreate$Params } from '../fn/setting/setting-controller-create';
import { settingControllerFindAll } from '../fn/setting/setting-controller-find-all';
import { SettingControllerFindAll$Params } from '../fn/setting/setting-controller-find-all';
import { settingControllerFindOne } from '../fn/setting/setting-controller-find-one';
import { SettingControllerFindOne$Params } from '../fn/setting/setting-controller-find-one';
import { settingControllerRemove } from '../fn/setting/setting-controller-remove';
import { SettingControllerRemove$Params } from '../fn/setting/setting-controller-remove';
import { settingControllerUpdate } from '../fn/setting/setting-controller-update';
import { SettingControllerUpdate$Params } from '../fn/setting/setting-controller-update';

@Injectable({ providedIn: 'root' })
export class SettingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `settingControllerFindAll()` */
  static readonly SettingControllerFindAllPath = '/settings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerFindAll$Response(params?: SettingControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return settingControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerFindAll(params?: SettingControllerFindAll$Params, context?: HttpContext): Observable<void> {
    return this.settingControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `settingControllerCreate()` */
  static readonly SettingControllerCreatePath = '/settings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingControllerCreate$Response(params: SettingControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return settingControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingControllerCreate(params: SettingControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.settingControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `settingControllerFindOne()` */
  static readonly SettingControllerFindOnePath = '/settings/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerFindOne$Response(params: SettingControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return settingControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerFindOne(params: SettingControllerFindOne$Params, context?: HttpContext): Observable<void> {
    return this.settingControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `settingControllerUpdate()` */
  static readonly SettingControllerUpdatePath = '/settings/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingControllerUpdate$Response(params: SettingControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return settingControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settingControllerUpdate(params: SettingControllerUpdate$Params, context?: HttpContext): Observable<void> {
    return this.settingControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `settingControllerRemove()` */
  static readonly SettingControllerRemovePath = '/settings/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settingControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerRemove$Response(params: SettingControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return settingControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settingControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  settingControllerRemove(params: SettingControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.settingControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
