/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { clientControllerCreate } from '../fn/client/client-controller-create';
import { ClientControllerCreate$Params } from '../fn/client/client-controller-create';
import { clientControllerFindAll } from '../fn/client/client-controller-find-all';
import { ClientControllerFindAll$Params } from '../fn/client/client-controller-find-all';
import { clientControllerFindOne } from '../fn/client/client-controller-find-one';
import { ClientControllerFindOne$Params } from '../fn/client/client-controller-find-one';
import { clientControllerRemove } from '../fn/client/client-controller-remove';
import { ClientControllerRemove$Params } from '../fn/client/client-controller-remove';
import { clientControllerUpdate } from '../fn/client/client-controller-update';
import { ClientControllerUpdate$Params } from '../fn/client/client-controller-update';

@Injectable({ providedIn: 'root' })
export class ClientService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `clientControllerFindAll()` */
  static readonly ClientControllerFindAllPath = '/clients';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerFindAll$Response(params?: ClientControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clientControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerFindAll(params?: ClientControllerFindAll$Params, context?: HttpContext): Observable<void> {
    return this.clientControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `clientControllerCreate()` */
  static readonly ClientControllerCreatePath = '/clients';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientControllerCreate$Response(params: ClientControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clientControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientControllerCreate(params: ClientControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.clientControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `clientControllerFindOne()` */
  static readonly ClientControllerFindOnePath = '/clients/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerFindOne$Response(params: ClientControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clientControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerFindOne(params: ClientControllerFindOne$Params, context?: HttpContext): Observable<void> {
    return this.clientControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `clientControllerUpdate()` */
  static readonly ClientControllerUpdatePath = '/clients/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientControllerUpdate$Response(params: ClientControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clientControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientControllerUpdate(params: ClientControllerUpdate$Params, context?: HttpContext): Observable<void> {
    return this.clientControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `clientControllerRemove()` */
  static readonly ClientControllerRemovePath = '/clients/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerRemove$Response(params: ClientControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clientControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientControllerRemove(params: ClientControllerRemove$Params, context?: HttpContext): Observable<void> {
    return this.clientControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
